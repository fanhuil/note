# 一、Javascript的组成

JavaScript的实现包括以下3个部分：

| ECMAScript(核心)      | 描述了JS的语法和基本对象。 |
| --------------------- | -------------------------- |
| 文档对象模型 （DOM）  | 处理网页内容的方法和接口   |
| 浏览器对象模型（BOM） | 与浏览器交互的方法和接口   |

javascript 有三部分构成，ECMAScript，DOM和BOM，根据宿主（浏览器）的不同，具体的表现形式也不尽相同，ie和其他的浏览器风格迥异,IE 扩展了 BOM，加入了 ActiveXObject 类，可以通过 JavaScript 实例化 ActiveX 对象。

1. DOM 是 W3C 的标准； [所有浏览器公共遵守的标准]
2. BOM 是 各个浏览器厂商根据 DOM在各自浏览器上的实现;[表现为不同浏览器定义有差别,实现方式不同]
3. window 是 BOM 对象，而非 js 对象；javacsript是通过访问BOM（Browser Object Model）对象来访问、控制、修改客户端(浏览器)

**ECMAScript扩展知识：**

① ECMAScript是一个标准，JS只是它的一个实现，其他实现包括ActionScript。

② “ECMAScript可以为不同种类的宿主环境提供核心的脚本编程能力……”，即ECMAScript不与具体的宿主环境相绑定，如JS的宿主环境是浏览器，AS的宿主环境是Flash。

③ECMAScript描述了以下内容：语法、类型、语句、关键字、保留字、运算符、对象。

# 二、DOM, DOCUMENT, BOM, WINDOW 区别

DOM 是为了操作文档出现的 API，document 是其的一个对象；
BOM 是为了操作浏览器出现的 API，window 是其的一个对象。

BOM是浏览器对象模型，DOM是[文档对象模型](https://www.baidu.com/s?wd=文档对象模型&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHcvrjTdrH00T1Y4mvn3mWKWmWT4nW99myRv0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnHTvPH6Ln1DzPH0snWR1P1fvn0)，前者是对浏览器本身进行操作，而后者是对浏览器（可看成容器）内的内容进行操作

![img](https://img-blog.csdn.net/20160826135326655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)

**归DOM管的：**

E区（就是你说的document啦。由web开发人员呕心沥血写出来的一个文件夹，里面有index.html，CSS和JS什么鬼的，部署在服务器上，我们可以通过浏览器的地址栏输入URL然后回车将这个document加载到本地，浏览，右键查看源代码等。

**归BOM管的：**

A区（浏览器的标签页，地址栏，搜索栏，书签栏，窗口放大还原关闭按钮，菜单栏等等）

B区（浏览器的右键菜单）

C区（document加载时的状态栏，显示http状态码等）

D区（滚动条scroll bar）

## 2.1 DOM

DOM 全称是 Document Object Model，也就是文档对象模型。是针对XML的基于树的API。描述了处理网页内容的方法和接口，是HTML和XML的API，DOM把整个页面规划成由节点层级构成的文档。

这个DOM定义了一个HTMLDocument和HTMLElement做为这种实现的基础,就是说为了能以编程的方法操作这个 HTML 的内容（比如添加某些元素、修改元素的内容、删除某些元素），我们把这个 HTML 看做一个对象树（DOM树），它本身和里面的所有东西比如 <div></div> 这些标签都看做一个对象，每个对象都叫做一个节点（node），节点可以理解为 DOM 中所有 Object 的父类。

![img](https://img-blog.csdn.net/20160826135305647?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)

DOM 有什么用？就是为了操作 HTML 中的元素，比如说我们要通过 JS 把这个网页的标题改了，直接这样就可以了：

```javascript
 document.title = 'how to make love';
```

这个 API 使得在网页被下载到浏览器之后改变网页的内容成为可能。

## 2.2 docunment

当浏览器下载到一个网页，通常是 HTML，这个 HTML 就叫 document（当然，这也是 DOM 树中的一个 node），从上图可以看到，document 通常是整个 DOM 树的根节点。这个 document 包含了标题（document.title）、URL（document.URL）等属性，可以直接在 JS 中访问到。

在一个浏览器窗口中可能有多个 document，例如，通过 iframe 加载的页面，每一个都是一个 document。

在 JS 中，可以通过 document 访问其子节点（其实任何节点都可以），如

document.body;document.getElementById('xxx');

## 2.3 BOM

BOM 是 Browser Object Model，浏览器对象模型。

刚才说过 DOM 是为了操作文档出现的接口，那 BOM 顾名思义其实就是为了控制浏览器的行为而出现的接口。
浏览器可以做什么呢？比如跳转到另一个页面、前进、后退等等，程序还可能需要获取屏幕的大小之类的参数。
所以 BOM 就是为了解决这些事情出现的接口。比如我们要让浏览器跳转到另一个页面，只需要

location.href = "http://www.xxxx.com";这个 location 就是 BOM 里的一个对象。

由于BOM的window包含了document，因此可以直接使用window对象的document属性，通过document属性就可以访问、检索、修改XHTML文档内容与结构。因为document对象又是DOM（Document Object Model）模型的根节点。

可以说，BOM包含了DOM(对象)，浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档。

## 2.4 window

window 也是 BOM 的一个对象，除去编程意义上的“兜底对象”之外，通过这个对象可以获取窗口位置、确定窗口大小、弹出对话框等等。例如我要关闭当前窗口：

window.close();

# 三、浏览器对象模型(BOM)

![img](https://img-blog.csdn.net/20160826135345273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)



## 3.1 Window对象

Window 对象是 JavaScript 层级中的顶层对象。

Window 对象代表一个浏览器窗口或一个框架。

Window 对象会在 <body> 或 <frameset> 每次出现时被自动创建。	

**1）对象属性**

成员对象属性

window //窗户自身, window=window.self 可使用全局属性 window访问　Window对象

document 对 Document 对象的只读引用。请参阅 Document 对象。

history 对 History 对象的只读引用。请参数 History 对象。

location 用于窗口或框架的 Location 对象。请参阅 Location 对象。

screen 对 Screen 对象的只读引用。请参数 Screen 对象。

navigator 对 Navigator 对象的只读引用。请参数 Navigator 对象。

external.AddFavorite("地址","标题" ) //把网站新增到保藏夹

基本属性

| 属性                                    | 描述                                                         |
| --------------------------------------- | ------------------------------------------------------------ |
| closed                                  | 返回窗口是否已被关闭。                                       |
| defaultStatus                           | 设置或返回窗口状态栏中的默认文本。                           |
| innerheight                             | 返回窗口的文档显示区的高度。                                 |
| innerwidth                              | 返回窗口的文档显示区的宽度。                                 |
| length                                  | 设置或返回窗口中的框架数量。                                 |
| name                                    | 设置或返回窗口的名称。                                       |
| opener                                  | 返回对创建此窗口的窗口的引用。                               |
| outerheight                             | 返回窗口的外部高度。                                         |
| outerwidth                              | 返回窗口的外部宽度。                                         |
| pageXOffset                             | 设置或返回当前页面相对于窗口显示区左上角的 X 位置。          |
| pageYOffset                             | 设置或返回当前页面相对于窗口显示区左上角的 Y 位置。          |
| parent                                  | 返回父窗口。                                                 |
| self                                    | 返回对当前窗口的引用。等价于 Window 属性。                   |
| window                                  | window 属性等价于 self 属性，它包含了对窗口自身的引用。      |
| status                                  | 设置窗口状态栏的文本。                                       |
| top                                     | 返回最顶层的先辈窗口。                                       |
| screenLeft、screenTop、screenX、screenY | 只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。IE、Safari 和 Opera 支持 screenLeft 和 screenTop，而 Firefox 和 Safari 支持 screenX 和 screenY。 |

**2）对象方法**

> window.close(); //关闭窗口
>
> window.alert("message"); //弹出一个具有OK按钮的系统消息框，显示指定的文本
>
> window.confirm("Are you sure?"); //弹出一个具有OK和Cancel按钮的询问对话框，返回一个布尔值
>
> window.prompt("What's your name?", "Default"); //提示用户输入信息，接受两个参数，即要显示给用户的文本和文本框中的默认值，将文本框中的值作为函数值返回
>
> window.status //可以使状态栏的文本暂时改变
>
> window.defaultStatus //默认的状态栏信息，可在用户离开当前页面前一直改变文本
>
> window.setTimeout("alert('xxx')", 1000); //设置在指定的毫秒数后执行指定的代码，接受2个参数，要执行的代码和等待的毫秒数
>
> window.clearTimeout("ID"); //取消还未执行的暂停，将暂停ID传递给它
>
> window.setInterval(function, 1000); //无限次地每隔指定的时间段重复一次指定的代码，参数同setTimeout()一样
>
> window.clearInterval("ID"); //取消时间间隔，将间隔ID传递给它
>
> window.history.go(-1); //访问浏览器窗口的历史，负数为后退，正数为前进
>
> window.history.back(); //同上
>
> window.history.forward(); //同上
>
> window.history.length //可以查看历史中的页面数  
>
> clearInterval() 取消由 setInterval() 设置的 timeout。
>
> clearTimeout() 取消由 setTimeout() 方法设置的 timeout。
>
> createPopup() 创建一个 pop-up 窗口。
>
> moveBy() 可相对窗口的当前坐标把它移动指定的像素。
>
> moveTo() 把窗口的左上角移动到一个指定的坐标。
>
> open() 打开一个新的浏览器窗口或查找一个已命名的窗口。
>
> print() 打印当前窗口的内容。
>
> resizeBy() 按照指定的像素调整窗口的大小。
>
> resizeTo() 把窗口的大小调整到指定的宽度和高度。
>
> scrollBy() 按照指定的像素值来滚动内容。
>
> scrollTo() 把内容滚动到指定的坐标。
>
> setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。
>
> setTimeout(方法,秒数) 在指定的毫秒数后调用函数或计算表达式。　
>
> timeOutEvent = setTimeout("longPress('" + obj + "')",1500);定时器传参数

**扩展**

① 如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。

② window.frames 返回窗口中所有命名的框架

③parent是父窗口（如果窗口是顶级窗口，那么parent==self==top）

top是最顶级父窗口（有的窗口中套了好几层frameset或者iframe）

self是当前窗口（等价window）

opener是用open方法打开当前窗口的那个窗口

④与消息框有关的方法：alert(String)、confirm(String)、prompt(String)

⑤两种定时器：setTimeout(code,latency) 和 setInterval(code,period)

注：setTimeout只执行一次code，如果要多次调用，可以让code自身再次调用setTimeout()；setInteval()会不停地调用code，直到clearInterval()被调用。

## 3.2 History

```javascript
window.history.length //浏览过的页面数

history.back() //在浏览历史里后退一步

history.forward() //在浏览历史里前进一步

history.go(i) //到汗青详细登记单的第i位

//i>0进步,i<0撤退退却
```

## 3.3 Screen对象

```javascript
screen对象：用于获取某些关于用户屏幕的信息，也可用window.screen引用它

window.screen.width //屏幕宽度

window.screen.height //屏幕高度

window.screen.colorDepth //屏幕颜色深度

window.screen.availWidth //可用宽度(除去任务栏的高度)

window.screen.availHeight //可用高度(除去任务栏的高度)
```

## 3.4 Navigator对象

navigator`对象：包含大量有关Web浏览器的信息，在检测浏览器及操作系统上非常有用

```javascript
　　window.navigator.appCodeName //浏览器代码名

　　window.navigator.appName //浏览器步伐名

　　window.navigator.appMinorVersion //浏览器补钉版本

　　window.navigator.cpuClass //cpu类型 x86

　　window.navigator.platform //操作体系类型 win32

　　window.navigator.plugins

　　window.navigator.opsProfile

　　window.navigator.userProfile

　　window.navigator.systemLanguage //客户体系语言 zh-cn简体中文

　　window.navigator.userLanguage //用户语言,同上

　　window.navigator.appVersion //浏览器版本(包括 体系版本)

　　window.navigator.userAgent//用户代理头的字符串表示

　　window.navigator.onLine //用户否在线

　　window.navigator.cookieEnabled //浏览器是否撑持cookie

　　window.navigator.mimeTypes
```







